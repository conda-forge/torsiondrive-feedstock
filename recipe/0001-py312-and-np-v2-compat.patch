From eae685f7248bd1066a8c63aa4abebb8c8c5bacf0 Mon Sep 17 00:00:00 2001
From: "Lori A. Burns" <lori.burns@gmail.com>
Date: Mon, 28 Apr 2025 15:01:27 -0400
Subject: [PATCH] py312 and np v2 compat

---
 torsiondrive/data/__init__.py        | 3 +++
 torsiondrive/dihedral_scanner.py     | 4 +++-
 torsiondrive/tests/test_qm_engine.py | 4 ++--
 versioneer.py                        | 4 ++--
 4 files changed, 10 insertions(+), 5 deletions(-)
 create mode 100644 torsiondrive/data/__init__.py

diff --git a/torsiondrive/data/__init__.py b/torsiondrive/data/__init__.py
new file mode 100644
index 0000000..7c7417c
--- /dev/null
+++ b/torsiondrive/data/__init__.py
@@ -0,0 +1,3 @@
+# Path to this data directory
+import os
+data_dir = os.path.dirname(os.path.abspath(__file__))
diff --git a/torsiondrive/dihedral_scanner.py b/torsiondrive/dihedral_scanner.py
index 351ac8b..910baba 100644
--- a/torsiondrive/dihedral_scanner.py
+++ b/torsiondrive/dihedral_scanner.py
@@ -673,7 +673,9 @@ class DihedralScanner:
             m.xyzs.append(self.grid_final_geometries[gid])
             if writing_gradients:
                 m.qm_grads.append(self.grid_final_gradients[gid])
-            m.comms.append("Dihedral %s Energy %.9f" % (str(gid), self.grid_energies[gid]))
+            # cast to avoid np v2 test failures merely on "Dihedral (np.int64(15),) Energy ..." vs "Dihedral (15,) Energy ..."
+            printed_gid = tuple(int(x) for x in gid)
+            m.comms.append("Dihedral %s Energy %.9f" % (str(printed_gid), self.grid_energies[gid]))
         m.write('qdata.txt')
         print(f"Final scan energies{' and gradients' if writing_gradients else ''} are written to qdata.txt")
         m.write('scan.xyz')
diff --git a/torsiondrive/tests/test_qm_engine.py b/torsiondrive/tests/test_qm_engine.py
index 7a89cdc..cf04033 100644
--- a/torsiondrive/tests/test_qm_engine.py
+++ b/torsiondrive/tests/test_qm_engine.py
@@ -5,10 +5,10 @@ Test for qm_engine module
 import os
 import subprocess
 import pytest
-from pkg_resources import resource_filename
 import shutil
 import numpy as np
 
+from torsiondrive.data import data_dir
 from torsiondrive.launch import create_engine
 from torsiondrive.qm_engine import QMEngine, EngineBlank, EnginePsi4, EngineQChem, EngineTerachem, EngineOpenMM, EngineGaussian, EnginexTB
 from geometric.molecule import Molecule
@@ -18,7 +18,7 @@ def get_data(relative_path):
     """
     Get the file path to some data in the torsiondrive package.
     """
-    fn = resource_filename("torsiondrive", os.path.join("data", relative_path))
+    fn = os.path.join(data_dir, relative_path)
 
     if not os.path.exists(fn):
         raise ValueError("The file %s can not be found. If you just added it re-install the package."%relative_path)
diff --git a/versioneer.py b/versioneer.py
index 64fea1c..3aa5da3 100644
--- a/versioneer.py
+++ b/versioneer.py
@@ -339,9 +339,9 @@ def get_config_from_root(root):
     # configparser.NoOptionError (if it lacks "VCS="). See the docstring at
     # the top of versioneer.py for instructions on writing your setup.cfg .
     setup_cfg = os.path.join(root, "setup.cfg")
-    parser = configparser.SafeConfigParser()
+    parser = configparser.ConfigParser()
     with open(setup_cfg, "r") as f:
-        parser.readfp(f)
+        parser.read_file(f)
     VCS = parser.get("versioneer", "VCS")  # mandatory
 
     def get(parser, name):
-- 
2.48.1

